version: '3.9'

services:
  mysql:
    image: mysql:8.1
    container_name: carenest-mysql
    restart: always
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: carenest
      MYSQL_USER: carenest
      MYSQL_PASSWORD: carenest
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - carenest-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2
    container_name: carenest-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - carenest-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    container_name: carenest-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - carenest-network

  kafka:
    image: confluentinc/cp-kafka:7.5.1
    container_name: carenest-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - carenest-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: carenest-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8085:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: carenest-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - carenest-network

  # 알림/채팅 도메인
  # notification-service:
  #   build:
  #     context: ./notification-service
  #   container_name: carenest-notification-service
  #   ports:
  #     - "8091:8091"
  #   depends_on:
  #     - mysql
  #     - kafka
  #     - redis
  #     - discovery-server
  #   networks:
  #     - carenest-network
  #   environment:
  #     SPRING_PROFILES_ACTIVE: docker
  #     EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka/
  #     SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/carenest?useSSL=false
  #     SPRING_DATASOURCE_USERNAME: carenest
  #     SPRING_DATASOURCE_PASSWORD: carenest
  #     SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
  #     SPRING_REDIS_HOST: redis
  #     SPRING_REDIS_PORT: 6379

  # 사용자 도메인
  # user-service:
  #   build:
  #     context: ./user-service
  #   container_name: carenest-user-service
  #   ports:
  #     - "8081:8081"
  #   depends_on:
  #     - mysql
  #     - kafka
  #     - discovery-server
  #   networks:
  #     - carenest-network
  #   environment:
  #     SPRING_PROFILES_ACTIVE: docker
  #     EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka/
  #     SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/carenest?useSSL=false
  #     SPRING_DATASOURCE_USERNAME: carenest
  #     SPRING_DATASOURCE_PASSWORD: carenest
  #     SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092

  # 예약/결제 도메인
  # reservation-service:
  #   build:
  #     context: ./reservation-service
  #   container_name: carenest-reservation-service
  #   ports:
  #     - "8082:8082"
  #   depends_on:
  #     - mysql
  #     - kafka
  #     - discovery-server
  #   networks:
  #     - carenest-network
  #   environment:
  #     SPRING_PROFILES_ACTIVE: docker
  #     EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka/
  #     SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/carenest?useSSL=false
  #     SPRING_DATASOURCE_USERNAME: carenest
  #     SPRING_DATASOURCE_PASSWORD: carenest
  #     SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092

  # 리뷰 도메인
  # review-service:
  #   build:
  #     context: ./review-service
  #   container_name: carenest-review-service
  #   ports:
  #     - "8083:8083"
  #   depends_on:
  #     - mysql
  #     - discovery-server
  #   networks:
  #     - carenest-network
  #   environment:
  #     SPRING_PROFILES_ACTIVE: docker
  #     EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka/
  #     SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/carenest?useSSL=false
  #     SPRING_DATASOURCE_USERNAME: carenest
  #     SPRING_DATASOURCE_PASSWORD: carenest

  # 매칭 서비스 도메인
  # matching-service:
  #   build:
  #     context: ./matching-service
  #   container_name: carenest-matching-service
  #   ports:
  #     - "8084:8084"
  #   depends_on:
  #     - mysql
  #     - discovery-server
  #   networks:
  #     - carenest-network
  #   environment:
  #     SPRING_PROFILES_ACTIVE: docker
  #     EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka/
  #     SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/carenest?useSSL=false
  #     SPRING_DATASOURCE_USERNAME: carenest
  #     SPRING_DATASOURCE_PASSWORD: carenest

  # 관리자 도메인
  # admin-service:
  #   build:
  #     context: ./admin-service
  #   container_name: carenest-admin-service
  #   ports:
  #     - "8086:8086"
  #   depends_on:
  #     - mysql
  #     - discovery-server
  #   networks:
  #     - carenest-network
  #   environment:
  #     SPRING_PROFILES_ACTIVE: docker
  #     EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka/
  #     SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/carenest?useSSL=false
  #     SPRING_DATASOURCE_USERNAME: carenest
  #     SPRING_DATASOURCE_PASSWORD: carenest

  # AI 도메인
  # ai-service:
  #   build:
  #     context: ./ai-service
  #   container_name: carenest-ai-service
  #   ports:
  #     - "8087:8087"
  #   depends_on:
  #     - mysql
  #     - discovery-server
  #   networks:
  #     - carenest-network
  #   environment:
  #     SPRING_PROFILES_ACTIVE: docker
  #     EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka/
  #     SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/carenest?useSSL=false
  #     SPRING_DATASOURCE_USERNAME: carenest
  #     SPRING_DATASOURCE_PASSWORD: carenest

  # 서비스 디스커버리
  # discovery-server:
  #   build:
  #     context: ./discovery-server
  #   container_name: carenest-discovery
  #   ports:
  #     - "8761:8761"
  #   networks:
  #     - carenest-network
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # API 게이트웨이
  # api-gateway:
  #   build:
  #     context: ./api-gateway
  #   container_name: carenest-gateway
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     discovery-server:
  #       condition: service_healthy
  #   networks:
  #     - carenest-network
  #   environment:
  #     SPRING_PROFILES_ACTIVE: docker
  #     EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-server:8761/eureka/

networks:
  carenest-network:
    driver: bridge

volumes:
  mysql-data:
  redis-data: